// com.app.DebugWindow// Adam Riggs//package com.adam.debug {	import flash.display.Sprite;	import flash.events.*;	import flash.text.TextField;		import gs.TweenMax;		import com.adam.utils.AppData;	import com.adam.events.MuleEvent;		public class DebugWindow extends Sprite {				private var appData:AppData=AppData.instance;				private var debugField:TextField;		private var ctrlDown:Boolean;				private var prevSnd:String;				/** Storage for the singleton instance. */		private static const _instance:DebugWindow = new DebugWindow(DebugLock);				public function DebugWindow(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != DebugLock)			{				throw new Error("Invalid DebugWindow access.  Use Database.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			//this.visible = false;			trace("DebugWindow() init");						initVars();			initEventListeners();			initDebugField();		}				private function initVars():void{			prevSnd="";		}				private function initEventListeners():void{			appData.eventManager.listen("debug", onDebug);			appData.eventManager.listen("keyboard", onKeyboard);		}				private function initDebugField():void{			trace("DebugWindow initDebugField()");			debugField=new TextField();			debugField.alpha=.9;			debugField.width=600;			debugField.height=800;			debugField.background=true;			debugField.border=true;			//debugField.visible=false;			//appendMsg("initDebugWindow()");			addChild(debugField);		}		//*****Core Functionality				public function setDebugWindowSize(w:int, h:int):void{			debugField.width=w;			debugField.height=h;		}				public function appendMsg(snd:String, msg:String):void{			//print the string and generate a newline			if(prevSnd!=snd){				debugField.appendText(snd+"\n");			}			debugField.appendText("\t"+msg+"\n");			prevSnd=snd;						debugField.scrollV=debugField.maxScrollV;		}				private function showWindow():void{			debugField.visible=true;		}				private function hideWindow():void{			debugField.visible=false;		}				public function toggleWindowVisible():void{			trace("toggleWindowVisible()");			if(debugField.visible){				debugField.visible=false;			} else {				debugField.visible=true;			}		}		//*****Event Handlers				private function onDebug(e:MuleEvent):void{			appendMsg(e.data.sender, e.data.msg);		}				private function onKeyboard(e:MuleEvent):void{			//trace("DebugWindow onKeyboard()");//			trace("*e.data.keyboardEvent.keyCode=="+e.data.keyboardEvent.keyCode);//			trace("*e.data.keyboardEvent.type=="+e.data.keyboardEvent.type);			switch(e.data.keyboardEvent.keyCode){								case 17:	//control key					if(e.data.keyboardEvent.type=="keyDown"){ctrlDown=true;}					if(e.data.keyboardEvent.type=="keyUp"){ctrlDown=false;}				break;								case 16:	//shift key					if(e.data.keyboardEvent.type=="keyDown" && ctrlDown){						toggleWindowVisible();					}				break;											}		}		//*****Gets and Sets				public static function get instance():DebugWindow{return _instance;}		}}class DebugLock{} 