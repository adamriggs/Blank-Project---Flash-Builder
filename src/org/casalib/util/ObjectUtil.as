/*	CASA Lib for ActionScript 3.0	Copyright (c) 2010, Aaron Clinger & Contributors of CASA Lib	All rights reserved.		Redistribution and use in source and binary forms, with or without	modification, are permitted provided that the following conditions are met:		- Redistributions of source code must retain the above copyright notice,	  this list of conditions and the following disclaimer.		- Redistributions in binary form must reproduce the above copyright notice,	  this list of conditions and the following disclaimer in the documentation	  and/or other materials provided with the distribution.		- Neither the name of the CASA Lib nor the names of its contributors	  may be used to endorse or promote products derived from this software	  without specific prior written permission.		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE	ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE	POSSIBILITY OF SUCH DAMAGE.*/package org.casalib.util {	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.utils.ByteArray;	import flash.utils.describeType;	import flash.utils.getDefinitionByName;	/**		Utilities for working with Objects.				@author Aaron Clinger		@author David Nelson		@author Rob Gungor		@version 03/29/10	*/	public class ObjectUtil {						/**			Searches the first level properties of an object for a another object.						@param obj: Object to search in.			@param member: Object to search for.			@return Returns <code>true</code> if object was found; otherwise <code>false</code>.		*/		public static function contains(obj:Object, member:Object):Boolean {			for (var prop:String in obj)				if (obj[prop] == member)					return true;						return false;		}				/**			Makes a clone of the original Object.						@param obj: Object to make the clone of.			@return Returns a duplicate Object.			@example				<code>					this._author      = new Person();					this._author.name = "Aaron";										registerClassAlias("Person", Person);										var humanClone:Person = Person(ObjectUtil.clone(this._author));										trace(humanClone.name);				</code>		*/		public static function clone(obj:Object):Object {			var byteArray:ByteArray = new ByteArray();			byteArray.writeObject(obj);			byteArray.position = 0;						return byteArray.readObject();		}				/**			Creates an Array comprised of all the keys in an Object.						@param obj: Object in which to find keys.			@return Array containing all the string key names.		*/		public static function getKeys(obj:Object):Array {			var keys:Array = new Array();						for (var i:String in obj)				keys.push(i);						return keys;		}				/**			Determines if an Object contains a specific method.						@param obj: Object in which to determine a method existence.			@param methodName: The name of the method.			@return Returns <code>true</code> if the method exists; otherwise <code>false</code>.		*/		public static function isMethod(obj:Object, methodName:String):Boolean {			if (obj.hasOwnProperty(methodName))				return obj[methodName] is Function;						return false;		}				/**			Uses the strict equality operator to determine if object is <code>undefined</code>.						@param obj: Object to determine if <code>undefined</code>.			@return Returns <code>true</code> if object is <code>undefined</code>; otherwise <code>false</code>.		*/		public static function isUndefined(obj:Object):Boolean {			return obj is undefined;		}				/**			Uses the strict equality operator to determine if object is <code>null</code>.						@param obj: Object to determine if <code>null</code>.			@return Returns <code>true</code> if object is <code>null</code>; otherwise <code>false</code>.		*/		public static function isNull(obj:Object):Boolean {			return obj === null;		}				/**			Determines if object contains no value(s).						@param obj: Object to derimine if empty.			@return Returns <code>true</code> if object is empty; otherwise <code>false</code>.			@example				<code>					var testNumber:Number;					var testArray:Array   = new Array();					var testString:String = "";					var testObject:Object = new Object();										trace(ObjectUtil.isEmpty(testNumber)); // traces "true"					trace(ObjectUtil.isEmpty(testArray));  // traces "true"					trace(ObjectUtil.isEmpty(testString)); // traces "true"					trace(ObjectUtil.isEmpty(testObject)); // traces "true"				</code>		*/		public static function isEmpty(obj:*):Boolean {			if (obj == undefined)				return true;						if (obj is Number)				return isNaN(obj);						if (obj is Array || obj is String)				return obj.length == 0;						if (obj is Object) {				for (var prop:String in obj)					return false;								return true;			}						return false;		}		/**		 * MXML like functionality for runtime creation of instances from XML.		 * Using parameters fials in versions before 10.1 due to known bug in describeType where type is sometimes "*".		 * 		 * @param xml The XML to convert to instances.		 * 		 * @example The following example shows how ObjectUtil.xmlToObject can be used to convert XML to instances including nesting attirbuts and constructor arguments.		 * <listing version="3.0" >			package 			{				import org.casalib.display.components.containers.Box;				import org.casalib.display.components.containers.HBox;				import org.casalib.display.components.containers.VBox;				import org.casalib.util.ObjectUtil;							import flash.display.Bitmap;				import flash.display.BitmapData;				import flash.display.Loader;				import flash.display.Sprite;				import flash.text.TextField;				import flash.text.TextFieldAutoSize;							public class Main extends Sprite 				{					public function Main() 					{						Box;						HBox;						VBox;						TextField;						Loader;						BitmapData;						Bitmap;												var layout:XML = 						<casa:VBox							xmlns:casa="org.casalib.display.components.containers"							xmlns:text="flash.text"							xmlns:display="flash.display"														padding="20">							<casa:HBox padding="20">								<text:TextField text="Lorem" autoSize={TextFieldAutoSize.LEFT} />								<text:TextField width="450" wordWrap="true" autoSize={TextFieldAutoSize.LEFT}>									<text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam viverra feugiat tellus non sollicitudin. In rutrum arcu ut elit pellentesque sit amet tincidunt lectus consectetur. Proin tellus magna, venenatis eget ultrices cursus, interdum vestibulum nunc. Ut dignissim laoreet mi, in semper augue molestie et. Duis vel nibh orci. Aliquam erat volutpat. Morbi et placerat eros. Morbi at diam quis elit fermentum adipiscing. Donec a lorem vitae magna lacinia suscipit vitae vel lectus. Nunc sem metus, ultrices nec gravida a, semper a lorem. Aenean tincidunt facilisis scelerisque. Suspendisse et enim velit, quis molestie massa. Cras posuere diam ut sapien sollicitudin ac tincidunt tellus sagittis.</text>								</text:TextField>							</casa:HBox>							<casa:HBox padding="20">								<display:Bitmap name="bitmap">									<parameter>										<display:BitmapData>											<parameter>100</parameter>											<parameter>50</parameter>											<parameter>true</parameter>											<parameter>{0xFFFF0000}</parameter>										</display:BitmapData>									</parameter>								</display:Bitmap>								<text:TextField width="450" wordWrap="true" autoSize={TextFieldAutoSize.LEFT}>									<text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam viverra feugiat tellus non sollicitudin. In rutrum arcu ut elit pellentesque sit amet tincidunt lectus consectetur. Proin tellus magna, venenatis eget ultrices cursus, interdum vestibulum nunc. Ut dignissim laoreet mi, in semper augue molestie et. Duis vel nibh orci. Aliquam erat volutpat. Morbi et placerat eros. Morbi at diam quis elit fermentum adipiscing. Donec a lorem vitae magna lacinia suscipit vitae vel lectus. Nunc sem metus, ultrices nec gravida a, semper a lorem. Aenean tincidunt facilisis scelerisque. Suspendisse et enim velit, quis molestie massa. Cras posuere diam ut sapien sollicitudin ac tincidunt tellus sagittis.</text>								</text:TextField>							</casa:HBox>							<casa:HBox padding="20">								<text:TextField text="Dolor" autoSize={TextFieldAutoSize.LEFT} />								<text:TextField width="450" wordWrap="true" autoSize={TextFieldAutoSize.LEFT}>									<text>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam viverra feugiat tellus non sollicitudin. In rutrum arcu ut elit pellentesque sit amet tincidunt lectus consectetur. Proin tellus magna, venenatis eget ultrices cursus, interdum vestibulum nunc. Ut dignissim laoreet mi, in semper augue molestie et. Duis vel nibh orci. Aliquam erat volutpat. Morbi et placerat eros. Morbi at diam quis elit fermentum adipiscing. Donec a lorem vitae magna lacinia suscipit vitae vel lectus. Nunc sem metus, ultrices nec gravida a, semper a lorem. Aenean tincidunt facilisis scelerisque. Suspendisse et enim velit, quis molestie massa. Cras posuere diam ut sapien sollicitudin ac tincidunt tellus sagittis.</text>								</text:TextField>							</casa:HBox>						</casa:VBox>;												var box:Box = ObjectUtil.xmlToObject(layout) as Box;						box.position();												addChild(box);					}				}			}		 * </listing>		 */		public static function xmlToObject(xml:XML, depth:String = "-"):*		{			var definition:Class;						try			{				definition = getDefinitionByName(xml.name()) as Class;			}catch(error:Error)			{				// No definition to instanitate.				return null;			}						// Collect description attributs.			var description:XML = describeType(definition);			var descriptionAttributs:Array = [];			for each (var accessor:XML in description.child("factory").child("accessor").(@access != "readonly")) 			{				descriptionAttributs.push({name:String(accessor.@name), type:String(accessor.@type)});			}			for each (var variable:XML in description.child("factory").child("variable").(@access != "readonly")) 			{				descriptionAttributs.push({name:String(variable.@name), type:String(variable.@type)});			}						// Collect parameters			var parameters:Array = [];			for (var i : int = 0; i < xml.child("parameter").length(); i++) {								var parameterNode:XML = xml.child("parameter")[i] as XML;							// Try to create complex object else use simple value				var parameterObject:* = xmlToObject(XML(parameterNode.children()[0]), depth += "-");								if(parameterObject)				{					parameters.push(parameterObject);				}				else				{										var parameterDefinition:Object = getDefinitionByName(String(description.child("factory").child("constructor").child("parameter")[i].@type));										var parameter:Object = parameterDefinition(String(parameterNode));										parameters.push(parameter);				}			}						parameters.unshift(definition);						// Instanitate.			var instance:* = ClassUtil.construct.apply({}, parameters);						// Collect instance attributs			var instanceAttributs:Array = [];			for each (var attribute:XML in xml.attributes()) 			{				instanceAttributs.push({name:attribute.name(), value:attribute});			}						for each (var node:XML in xml.children())  			{				// Create child DisplayObject				var subDisplayObject:* = xmlToObject(node, depth += "-");								if(subDisplayObject is DisplayObject && instance is DisplayObjectContainer)				{					DisplayObjectContainer(instance).addChild(subDisplayObject);					continue;				}								// Try to create complex object else use simple value				var subObject:* = xmlToObject(XML(node.children()[0]), depth += "-");								if(subObject)				{					instanceAttributs.push({name:node.name(), value:subObject});				}				else				{					instanceAttributs.push({name:node.name(), value:node});				}			}						// Apply attributs to instance.			for each (var instanceAttribut:* in instanceAttributs) 			{								var attributDescription:* = ArrayUtil.getItemByKey(descriptionAttributs, "name", instanceAttribut["name"]);								if(attributDescription)				{					var attributeDefinition:Object = getDefinitionByName(attributDescription["type"]);					instance[attributDescription["name"]] = attributeDefinition(instanceAttribut["value"]);				}			}						return instance;		}	}}