// Shell// Adam Riggs// 2/25/2011//package{		//import Main;		import com.adam.db.Database;	import com.adam.db.SQLProxy;	import com.adam.debug.DebugWindow;	import com.adam.events.EventManager;	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;	import com.adam.utils.Bandwidth;		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Capabilities;	import flash.system.Security;		import gs.TweenLite;		[SWF(width='960', height='610', backgroundColor='#ffffff', frameRate='30')]		public class Shell extends Sprite{				private var main:Sprite;		private var mainLoader:Loader;				//progress bar variables		private var progressBar:Sprite;		private var progressW:int;		private var progressH:int;		private var progressFill:int;		private var progressBkg:int;				//bandwidth variables;		private var bandwidthProgress:Object;		private var bandwidth:Bandwidth;				private var xmlLoader:URLLoader;				private var doneAA:Object;		private var isDone:Boolean;				private var appData:AppData=AppData.instance;				public function Shell():void{			init();		}//*****Initialization Routines				public function init():void{			trace("Shell init()");						appData.shell=this;			appData.playerType=flash.system.Capabilities.playerType;			appData.buildType="product";			appData.mainWidth=1280;			appData.mainHeight=752;						Security.allowDomain("*");						initDoneArray();			initBandwidth();			initEventManager();			initDebugWindow();			//initFlashMediaServer();			initFlashVars();			//initXML();	//initXML() is called after the flashVars are loaded			initStage();			initProgressBar();			//initMain();		//initMain() is called after everything else is done loading, i.e. the doneAA is all true			//initSQL();		//called after XML loaded			//initDatabase();	//called after XML loaded			initDatabase();		}				private function initDoneArray():void{			trace("Shell initDoneArray()");			//creat an associative array with boolean flags that			//are flipped to true when an initalization operation is completed.						//register all here			doneAA=new Object();			doneAA.eventManagerDone=false;			doneAA.debugDone=false;			//doneAA.fmsDone=false;			doneAA.fvDone=false;			//doneAA.xmlDone=false;			doneAA.stageDone=false;			//doneAA.sqlDone=false;			doneAA.dbDone=false;		}				private function initBandwidth():void{			trace("Shell initBandwidth()");			//initialize the bandwidth measuring object			bandwidth=new Bandwidth;			appData.bandwidth=bandwidth;		}				private function initEventManager():void{			trace("Shell initEventManager()");			appData.eventManager=EventManager.instance;			doneAA.eventManagerDone=true;		}				private function initDebugWindow():void{			trace("Shell initDebugWindow()");			appData.debugWindow=DebugWindow.instance;			addChild(appData.debugWindow);			doneAA.debugDone=true;		}				/*private function initFlashMediaServer():void{			trace("Shell initFlashMediaServer()");			appData.fms=FlashMediaServer.instance;			doneAA.fmsDone=true;		}*/				private function initFlashVars():void{			trace("Shell initFlashVars()");			//read in the flash vars			loaderInfo.addEventListener(Event.COMPLETE, onLoaderComplete);		}				private function initXML():void{			trace("Shell initXML()");			//load the main xml file			//this isnt' called until onLoaderComplete in case the flashvars have the xml file address			var url:String;			if(appData.flashVars.xml){				url=appData.flashVars.xml			} else {				url="main.xml";			}			xmlLoader=new URLLoader(new URLRequest(url));			xmlLoader.addEventListener("complete", onXMLLoaded);		}				private function initStage():void{			trace("Shell initStage()");			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function initMain():void{			trace("Shell initMain()");			//this is for directly instantiating the main			/*main=new Main();			startMain();*/						//this is for loading the Main.swf			mainLoader=new Loader();			mainLoader.contentLoaderInfo.addEventListener("complete", onMainLoaded);			mainLoader.contentLoaderInfo.addEventListener("progress", onMainProgress);			mainLoader.load(new URLRequest("Main.swf"));						//start keeping track of download time			bandwidth.startTime=new Date();					}				private function initProgressBar():void{			//progressBar should really be it's own class.			trace("Shell initProgressBar()");						progressW=100;			progressH=3;			progressFill=0x333333;			progressBkg=0xCCCCCC;						progressBar=new Sprite();			progressBar.graphics.lineStyle(progressH,progressBkg);			progressBar.graphics.moveTo(0, 0);			progressBar.graphics.lineTo(progressW, 0);			addChild(progressBar);						progressBar.graphics.moveTo(0, 0);						progressBar.x=(stage.stageWidth-progressW)/2;			progressBar.y=(stage.stageHeight-progressH)/2;			//progressBar.alpha=0;		}				private function initSQL():void{			//this gets set up here and loads the data in videoplayer			/*appData.sql=SQLProxy.instance;			appData.sql.init();			doneAA.sqlDone=true;*/		}				private function initDatabase():void{			trace("initDatabase()");			appData.database=Database.instance;			doneAA.dbDone=true;		}//*****Core Functionality				private function checkDone():void{			trace("Shell checkDone()");			//check if everything is done			isDone=true;			for(var item:Object in doneAA){				if(doneAA[item]==false){isDone=false;trace("item=="+item.toString());}			}						if(isDone){				done();			}		}				private function done():void{			trace("Shell done()");			//once everything else is loaded, init the main			initMain();		}				private function startMain():void{			trace("Shell startMain()");			appData.main=main;			main.alpha=0;			TweenLite.to(main, .5, {alpha:1});			addChildAt(main,1);			//main.init();			appData.eventManager.dispatch("main", {type:"init", sender:"shell"});		}				private function removeProgress():void{			progressBar.graphics.clear();			removeChild(progressBar);			progressBar=null;				}		//*****Event Handlers				//main		private function onMainLoaded(e:Event):void{			trace("Shell onMainLoaded()");						mainLoader.contentLoaderInfo.removeEventListener("complete", onMainLoaded);			mainLoader.contentLoaderInfo.removeEventListener("progress", onMainProgress);			main=Sprite(mainLoader.content);						bandwidth.endTime=new Date();			bandwidth.calcBandwidth();						startMain();						progressBar.graphics.moveTo(0, 0);			progressBar.graphics.lineStyle(progressH,progressFill);			progressBar.graphics.lineTo(progressW, 0);			progressBar.alpha=0;		}				private function onMainProgress(e:ProgressEvent):void{			progressBar.graphics.lineStyle(progressH,progressFill);			progressBar.graphics.lineTo((progressW*e.bytesLoaded)/e.bytesTotal, 0);						bandwidth.totalBytes=e.bytesTotal;			//bandwidth.progressArray.push({bytesLoaded:e.bytesLoaded,bytesTotal:e.bytesTotal, time:new Date()});		}				//stage		private function onAddedToStage(e:Event):void{			trace("Shell onAddedToStage()");						removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);			stage.addEventListener(KeyboardEvent.KEY_UP, onKey);						//check if the swf is a local file or not			if(stage.loaderInfo.url.indexOf("file:")!=-1){				trace("Shell is local");				appData.isLocal=true;			} else {				trace("Shell is not local");				appData.isLocal=false;			}						doneAA.stageDone=true;			checkDone();		}				//xml		private function onXMLLoaded(e:Event):void{			trace("Shell onXMLLoaded()");						xmlLoader.removeEventListener("complete", onXMLLoaded);						appData.mainXML=new XML(e.target.data);			trace("appData.mainXML=="+appData.mainXML);						//initSQL();			initDatabase();						doneAA.xmlDone=true;			checkDone();		}				//flashvars		private function onLoaderComplete(e:Event):void{			trace("Shell onLoaderComplete() - flashvars loaded");						appData.flashVars=this.loaderInfo.parameters;			loaderInfo.removeEventListener(Event.COMPLETE, onLoaderComplete);						for(var item:Object in appData.flashVars){				trace("appData.flashVars."+item+"=="+appData.flashVars[item]);			}						//initXML();	//this is here in case the flashvars has the xml file 						doneAA.fvDone=true;			checkDone();		}						//keyboard		private function onKey(e:KeyboardEvent):void{			appData.eventManager.dispatch("keyboard", {keyboardEvent:e});					}			}}